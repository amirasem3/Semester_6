// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2019 16:23:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cin;
reg [31:0] DATA1;
reg [31:0] DATA2;
reg [2:0] OP;
reg [4:0] SHAMT;
// wires                                               
wire E;
wire [31:0] OUTPUT;
wire OVERFLOW;
wire SIGN;
wire ZERO;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.Cin(Cin),
	.DATA1(DATA1),
	.DATA2(DATA2),
	.E(E),
	.OP(OP),
	.\OUTPUT (OUTPUT),
	.OVERFLOW(OVERFLOW),
	.SHAMT(SHAMT),
	.SIGN(SIGN),
	.ZERO(ZERO)
);
initial 
begin 
#1000000 $finish;
end 

// Cin
initial
begin
	Cin = 1'b0;
	Cin = #30000 1'b1;
	Cin = #30000 1'b0;
end 
// DATA1[ 31 ]
initial
begin
	DATA1[31] = 1'b1;
	DATA1[31] = #30000 1'b0;
	DATA1[31] = #520000 1'b1;
	DATA1[31] = #50000 1'b0;
end 
// DATA1[ 30 ]
initial
begin
	DATA1[30] = 1'b1;
	DATA1[30] = #30000 1'b0;
	DATA1[30] = #520000 1'b1;
	DATA1[30] = #50000 1'b0;
end 
// DATA1[ 29 ]
initial
begin
	DATA1[29] = 1'b1;
	DATA1[29] = #30000 1'b0;
	DATA1[29] = #520000 1'b1;
	DATA1[29] = #50000 1'b0;
end 
// DATA1[ 28 ]
initial
begin
	DATA1[28] = 1'b1;
	DATA1[28] = #30000 1'b0;
	DATA1[28] = #520000 1'b1;
	DATA1[28] = #50000 1'b0;
end 
// DATA1[ 27 ]
initial
begin
	DATA1[27] = 1'b1;
	DATA1[27] = #30000 1'b0;
	DATA1[27] = #520000 1'b1;
	DATA1[27] = #50000 1'b0;
end 
// DATA1[ 26 ]
initial
begin
	DATA1[26] = 1'b1;
	DATA1[26] = #30000 1'b0;
	DATA1[26] = #520000 1'b1;
	DATA1[26] = #50000 1'b0;
end 
// DATA1[ 25 ]
initial
begin
	DATA1[25] = 1'b1;
	DATA1[25] = #30000 1'b0;
	DATA1[25] = #520000 1'b1;
	DATA1[25] = #50000 1'b0;
end 
// DATA1[ 24 ]
initial
begin
	DATA1[24] = 1'b1;
	DATA1[24] = #30000 1'b0;
	DATA1[24] = #520000 1'b1;
	DATA1[24] = #50000 1'b0;
end 
// DATA1[ 23 ]
initial
begin
	DATA1[23] = 1'b1;
	DATA1[23] = #30000 1'b0;
	DATA1[23] = #520000 1'b1;
	DATA1[23] = #50000 1'b0;
end 
// DATA1[ 22 ]
initial
begin
	DATA1[22] = 1'b1;
	DATA1[22] = #30000 1'b0;
	DATA1[22] = #520000 1'b1;
	DATA1[22] = #50000 1'b0;
end 
// DATA1[ 21 ]
initial
begin
	DATA1[21] = 1'b1;
	DATA1[21] = #30000 1'b0;
	DATA1[21] = #520000 1'b1;
	DATA1[21] = #50000 1'b0;
end 
// DATA1[ 20 ]
initial
begin
	DATA1[20] = 1'b1;
	DATA1[20] = #30000 1'b0;
	DATA1[20] = #520000 1'b1;
	DATA1[20] = #50000 1'b0;
end 
// DATA1[ 19 ]
initial
begin
	DATA1[19] = 1'b1;
	DATA1[19] = #30000 1'b0;
	DATA1[19] = #520000 1'b1;
	DATA1[19] = #50000 1'b0;
end 
// DATA1[ 18 ]
initial
begin
	DATA1[18] = 1'b1;
	DATA1[18] = #30000 1'b0;
	DATA1[18] = #520000 1'b1;
	DATA1[18] = #50000 1'b0;
end 
// DATA1[ 17 ]
initial
begin
	DATA1[17] = 1'b1;
	DATA1[17] = #30000 1'b0;
	DATA1[17] = #520000 1'b1;
	DATA1[17] = #50000 1'b0;
end 
// DATA1[ 16 ]
initial
begin
	DATA1[16] = 1'b1;
	DATA1[16] = #30000 1'b0;
	DATA1[16] = #520000 1'b1;
	DATA1[16] = #50000 1'b0;
end 
// DATA1[ 15 ]
initial
begin
	DATA1[15] = 1'b1;
	DATA1[15] = #30000 1'b0;
	DATA1[15] = #520000 1'b1;
	DATA1[15] = #50000 1'b0;
end 
// DATA1[ 14 ]
initial
begin
	DATA1[14] = 1'b1;
	DATA1[14] = #30000 1'b0;
	DATA1[14] = #520000 1'b1;
	DATA1[14] = #50000 1'b0;
end 
// DATA1[ 13 ]
initial
begin
	DATA1[13] = 1'b1;
	DATA1[13] = #30000 1'b0;
	DATA1[13] = #520000 1'b1;
	DATA1[13] = #50000 1'b0;
end 
// DATA1[ 12 ]
initial
begin
	DATA1[12] = 1'b1;
	DATA1[12] = #30000 1'b0;
	DATA1[12] = #520000 1'b1;
	DATA1[12] = #50000 1'b0;
end 
// DATA1[ 11 ]
initial
begin
	DATA1[11] = 1'b1;
	DATA1[11] = #30000 1'b0;
	DATA1[11] = #520000 1'b1;
	DATA1[11] = #50000 1'b0;
end 
// DATA1[ 10 ]
initial
begin
	DATA1[10] = 1'b1;
	DATA1[10] = #30000 1'b0;
	DATA1[10] = #520000 1'b1;
	DATA1[10] = #50000 1'b0;
end 
// DATA1[ 9 ]
initial
begin
	DATA1[9] = 1'b1;
	DATA1[9] = #30000 1'b0;
	DATA1[9] = #520000 1'b1;
	DATA1[9] = #50000 1'b0;
end 
// DATA1[ 8 ]
initial
begin
	DATA1[8] = 1'b1;
	DATA1[8] = #30000 1'b0;
	DATA1[8] = #520000 1'b1;
	DATA1[8] = #50000 1'b0;
end 
// DATA1[ 7 ]
initial
begin
	DATA1[7] = 1'b1;
	DATA1[7] = #30000 1'b0;
	DATA1[7] = #520000 1'b1;
	DATA1[7] = #50000 1'b0;
end 
// DATA1[ 6 ]
initial
begin
	DATA1[6] = 1'b1;
	DATA1[6] = #30000 1'b0;
	DATA1[6] = #520000 1'b1;
	DATA1[6] = #50000 1'b0;
end 
// DATA1[ 5 ]
initial
begin
	DATA1[5] = 1'b1;
	DATA1[5] = #30000 1'b0;
	DATA1[5] = #440000 1'b1;
	DATA1[5] = #30000 1'b0;
	DATA1[5] = #50000 1'b1;
	DATA1[5] = #50000 1'b0;
end 
// DATA1[ 4 ]
initial
begin
	DATA1[4] = 1'b1;
	DATA1[4] = #30000 1'b0;
	DATA1[4] = #440000 1'b1;
	DATA1[4] = #30000 1'b0;
end 
// DATA1[ 3 ]
initial
begin
	DATA1[3] = 1'b0;
	DATA1[3] = #500000 1'b1;
	DATA1[3] = #100000 1'b0;
end 
// DATA1[ 2 ]
initial
begin
	DATA1[2] = 1'b1;
	DATA1[2] = #500000 1'b0;
	DATA1[2] = #50000 1'b1;
	DATA1[2] = #180000 1'b0;
end 
// DATA1[ 1 ]
initial
begin
	DATA1[1] = 1'b1;
	DATA1[1] = #30000 1'b0;
	DATA1[1] = #440000 1'b1;
	DATA1[1] = #80000 1'b0;
end 
// DATA1[ 0 ]
initial
begin
	DATA1[0] = 1'b0;
	DATA1[0] = #30000 1'b1;
	DATA1[0] = #470000 1'b0;
	DATA1[0] = #100000 1'b1;
	DATA1[0] = #130000 1'b0;
end 
// DATA2[ 31 ]
initial
begin
	DATA2[31] = 1'b0;
	DATA2[31] = #90000 1'b1;
	DATA2[31] = #40000 1'b0;
	DATA2[31] = #370000 1'b1;
	DATA2[31] = #50000 1'b0;
end 
// DATA2[ 30 ]
initial
begin
	DATA2[30] = 1'b0;
	DATA2[30] = #90000 1'b1;
	DATA2[30] = #40000 1'b0;
	DATA2[30] = #370000 1'b1;
	DATA2[30] = #50000 1'b0;
	DATA2[30] = #50000 1'b1;
	DATA2[30] = #130000 1'b0;
end 
// DATA2[ 29 ]
initial
begin
	DATA2[29] = 1'b0;
	DATA2[29] = #90000 1'b1;
	DATA2[29] = #40000 1'b0;
	DATA2[29] = #370000 1'b1;
	DATA2[29] = #50000 1'b0;
	DATA2[29] = #50000 1'b1;
	DATA2[29] = #130000 1'b0;
end 
// DATA2[ 28 ]
initial
begin
	DATA2[28] = 1'b0;
	DATA2[28] = #90000 1'b1;
	DATA2[28] = #40000 1'b0;
	DATA2[28] = #370000 1'b1;
	DATA2[28] = #50000 1'b0;
	DATA2[28] = #50000 1'b1;
	DATA2[28] = #130000 1'b0;
end 
// DATA2[ 27 ]
initial
begin
	DATA2[27] = 1'b0;
	DATA2[27] = #90000 1'b1;
	DATA2[27] = #40000 1'b0;
	DATA2[27] = #370000 1'b1;
	DATA2[27] = #50000 1'b0;
	DATA2[27] = #50000 1'b1;
	DATA2[27] = #130000 1'b0;
end 
// DATA2[ 26 ]
initial
begin
	DATA2[26] = 1'b0;
	DATA2[26] = #90000 1'b1;
	DATA2[26] = #40000 1'b0;
	DATA2[26] = #370000 1'b1;
	DATA2[26] = #50000 1'b0;
	DATA2[26] = #50000 1'b1;
	DATA2[26] = #130000 1'b0;
end 
// DATA2[ 25 ]
initial
begin
	DATA2[25] = 1'b0;
	DATA2[25] = #90000 1'b1;
	DATA2[25] = #40000 1'b0;
	DATA2[25] = #370000 1'b1;
	DATA2[25] = #50000 1'b0;
	DATA2[25] = #50000 1'b1;
	DATA2[25] = #130000 1'b0;
end 
// DATA2[ 24 ]
initial
begin
	DATA2[24] = 1'b0;
	DATA2[24] = #90000 1'b1;
	DATA2[24] = #40000 1'b0;
	DATA2[24] = #370000 1'b1;
	DATA2[24] = #50000 1'b0;
	DATA2[24] = #50000 1'b1;
	DATA2[24] = #130000 1'b0;
end 
// DATA2[ 23 ]
initial
begin
	DATA2[23] = 1'b0;
	DATA2[23] = #90000 1'b1;
	DATA2[23] = #40000 1'b0;
	DATA2[23] = #370000 1'b1;
	DATA2[23] = #50000 1'b0;
	DATA2[23] = #50000 1'b1;
	DATA2[23] = #130000 1'b0;
end 
// DATA2[ 22 ]
initial
begin
	DATA2[22] = 1'b0;
	DATA2[22] = #90000 1'b1;
	DATA2[22] = #40000 1'b0;
	DATA2[22] = #370000 1'b1;
	DATA2[22] = #50000 1'b0;
	DATA2[22] = #50000 1'b1;
	DATA2[22] = #130000 1'b0;
end 
// DATA2[ 21 ]
initial
begin
	DATA2[21] = 1'b0;
	DATA2[21] = #90000 1'b1;
	DATA2[21] = #40000 1'b0;
	DATA2[21] = #370000 1'b1;
	DATA2[21] = #50000 1'b0;
	DATA2[21] = #50000 1'b1;
	DATA2[21] = #130000 1'b0;
end 
// DATA2[ 20 ]
initial
begin
	DATA2[20] = 1'b0;
	DATA2[20] = #90000 1'b1;
	DATA2[20] = #40000 1'b0;
	DATA2[20] = #370000 1'b1;
	DATA2[20] = #50000 1'b0;
	DATA2[20] = #50000 1'b1;
	DATA2[20] = #130000 1'b0;
end 
// DATA2[ 19 ]
initial
begin
	DATA2[19] = 1'b0;
	DATA2[19] = #90000 1'b1;
	DATA2[19] = #40000 1'b0;
	DATA2[19] = #370000 1'b1;
	DATA2[19] = #50000 1'b0;
	DATA2[19] = #50000 1'b1;
	DATA2[19] = #130000 1'b0;
end 
// DATA2[ 18 ]
initial
begin
	DATA2[18] = 1'b0;
	DATA2[18] = #90000 1'b1;
	DATA2[18] = #40000 1'b0;
	DATA2[18] = #370000 1'b1;
	DATA2[18] = #50000 1'b0;
	DATA2[18] = #50000 1'b1;
	DATA2[18] = #130000 1'b0;
end 
// DATA2[ 17 ]
initial
begin
	DATA2[17] = 1'b0;
	DATA2[17] = #90000 1'b1;
	DATA2[17] = #40000 1'b0;
	DATA2[17] = #370000 1'b1;
	DATA2[17] = #50000 1'b0;
	DATA2[17] = #50000 1'b1;
	DATA2[17] = #130000 1'b0;
end 
// DATA2[ 16 ]
initial
begin
	DATA2[16] = 1'b0;
	DATA2[16] = #90000 1'b1;
	DATA2[16] = #40000 1'b0;
	DATA2[16] = #370000 1'b1;
	DATA2[16] = #50000 1'b0;
	DATA2[16] = #50000 1'b1;
	DATA2[16] = #130000 1'b0;
end 
// DATA2[ 15 ]
initial
begin
	DATA2[15] = 1'b0;
	DATA2[15] = #90000 1'b1;
	DATA2[15] = #40000 1'b0;
	DATA2[15] = #370000 1'b1;
	DATA2[15] = #50000 1'b0;
	DATA2[15] = #50000 1'b1;
	DATA2[15] = #130000 1'b0;
end 
// DATA2[ 14 ]
initial
begin
	DATA2[14] = 1'b0;
	DATA2[14] = #90000 1'b1;
	DATA2[14] = #40000 1'b0;
	DATA2[14] = #370000 1'b1;
	DATA2[14] = #50000 1'b0;
	DATA2[14] = #50000 1'b1;
	DATA2[14] = #130000 1'b0;
end 
// DATA2[ 13 ]
initial
begin
	DATA2[13] = 1'b0;
	DATA2[13] = #90000 1'b1;
	DATA2[13] = #40000 1'b0;
	DATA2[13] = #370000 1'b1;
	DATA2[13] = #50000 1'b0;
	DATA2[13] = #50000 1'b1;
	DATA2[13] = #130000 1'b0;
end 
// DATA2[ 12 ]
initial
begin
	DATA2[12] = 1'b0;
	DATA2[12] = #90000 1'b1;
	DATA2[12] = #40000 1'b0;
	DATA2[12] = #370000 1'b1;
	DATA2[12] = #50000 1'b0;
	DATA2[12] = #50000 1'b1;
	DATA2[12] = #130000 1'b0;
end 
// DATA2[ 11 ]
initial
begin
	DATA2[11] = 1'b0;
	DATA2[11] = #90000 1'b1;
	DATA2[11] = #40000 1'b0;
	DATA2[11] = #370000 1'b1;
	DATA2[11] = #50000 1'b0;
	DATA2[11] = #50000 1'b1;
	DATA2[11] = #130000 1'b0;
end 
// DATA2[ 10 ]
initial
begin
	DATA2[10] = 1'b0;
	DATA2[10] = #90000 1'b1;
	DATA2[10] = #40000 1'b0;
	DATA2[10] = #370000 1'b1;
	DATA2[10] = #50000 1'b0;
	DATA2[10] = #50000 1'b1;
	DATA2[10] = #130000 1'b0;
end 
// DATA2[ 9 ]
initial
begin
	DATA2[9] = 1'b0;
	DATA2[9] = #90000 1'b1;
	DATA2[9] = #40000 1'b0;
	DATA2[9] = #370000 1'b1;
	DATA2[9] = #50000 1'b0;
	DATA2[9] = #50000 1'b1;
	DATA2[9] = #130000 1'b0;
end 
// DATA2[ 8 ]
initial
begin
	DATA2[8] = 1'b0;
	DATA2[8] = #90000 1'b1;
	DATA2[8] = #40000 1'b0;
	DATA2[8] = #370000 1'b1;
	DATA2[8] = #50000 1'b0;
	DATA2[8] = #50000 1'b1;
	DATA2[8] = #130000 1'b0;
end 
// DATA2[ 7 ]
initial
begin
	DATA2[7] = 1'b0;
	DATA2[7] = #90000 1'b1;
	DATA2[7] = #40000 1'b0;
	DATA2[7] = #370000 1'b1;
	DATA2[7] = #50000 1'b0;
	DATA2[7] = #50000 1'b1;
	DATA2[7] = #130000 1'b0;
end 
// DATA2[ 6 ]
initial
begin
	DATA2[6] = 1'b0;
	DATA2[6] = #90000 1'b1;
	DATA2[6] = #40000 1'b0;
	DATA2[6] = #370000 1'b1;
	DATA2[6] = #50000 1'b0;
	DATA2[6] = #50000 1'b1;
	DATA2[6] = #130000 1'b0;
end 
// DATA2[ 5 ]
initial
begin
	DATA2[5] = 1'b0;
	DATA2[5] = #90000 1'b1;
	DATA2[5] = #40000 1'b0;
	DATA2[5] = #340000 1'b1;
	DATA2[5] = #80000 1'b0;
	DATA2[5] = #50000 1'b1;
	DATA2[5] = #130000 1'b0;
end 
// DATA2[ 4 ]
initial
begin
	DATA2[4] = 1'b0;
	DATA2[4] = #90000 1'b1;
	DATA2[4] = #40000 1'b0;
	DATA2[4] = #340000 1'b1;
	DATA2[4] = #30000 1'b0;
	DATA2[4] = #100000 1'b1;
	DATA2[4] = #130000 1'b0;
end 
// DATA2[ 3 ]
initial
begin
	DATA2[3] = 1'b0;
	DATA2[3] = #90000 1'b1;
	DATA2[3] = #40000 1'b0;
	DATA2[3] = #370000 1'b1;
	DATA2[3] = #230000 1'b0;
end 
// DATA2[ 2 ]
initial
begin
	DATA2[2] = 1'b0;
	DATA2[2] = #90000 1'b1;
	DATA2[2] = #40000 1'b0;
	DATA2[2] = #340000 1'b1;
	DATA2[2] = #80000 1'b0;
	DATA2[2] = #50000 1'b1;
	DATA2[2] = #130000 1'b0;
end 
// DATA2[ 1 ]
initial
begin
	DATA2[1] = 1'b1;
	DATA2[1] = #500000 1'b0;
	DATA2[1] = #50000 1'b1;
	DATA2[1] = #180000 1'b0;
end 
// DATA2[ 0 ]
initial
begin
	DATA2[0] = 1'b1;
	DATA2[0] = #90000 1'b0;
	DATA2[0] = #40000 1'b1;
	DATA2[0] = #370000 1'b0;
	DATA2[0] = #100000 1'b1;
	DATA2[0] = #130000 1'b0;
end 
// OP[ 2 ]
initial
begin
	OP[2] = 1'b0;
	OP[2] = #220000 1'b1;
	OP[2] = #380000 1'b0;
end 
// OP[ 1 ]
initial
begin
	OP[1] = 1'b0;
	OP[1] = #130000 1'b1;
	OP[1] = #90000 1'b0;
	OP[1] = #200000 1'b1;
	OP[1] = #180000 1'b0;
end 
// OP[ 0 ]
initial
begin
	OP[0] = 1'b0;
	OP[0] = #60000 1'b1;
	OP[0] = #70000 1'b0;
	OP[0] = #50000 1'b1;
	OP[0] = #40000 1'b0;
	OP[0] = #110000 1'b1;
	OP[0] = #90000 1'b0;
	OP[0] = #80000 1'b1;
	OP[0] = #100000 1'b0;
end 
// SHAMT[ 4 ]
initial
begin
	SHAMT[4] = 1'b0;
end 
// SHAMT[ 3 ]
initial
begin
	SHAMT[3] = 1'b0;
end 
// SHAMT[ 2 ]
initial
begin
	SHAMT[2] = 1'b0;
end 
// SHAMT[ 1 ]
initial
begin
	SHAMT[1] = 1'b0;
	SHAMT[1] = #250000 1'b1;
	SHAMT[1] = #60000 1'b0;
	SHAMT[1] = #50000 1'b1;
	SHAMT[1] = #60000 1'b0;
end 
// SHAMT[ 0 ]
initial
begin
	SHAMT[0] = 1'b0;
	SHAMT[0] = #220000 1'b1;
	SHAMT[0] = #30000 1'b0;
	SHAMT[0] = #30000 1'b1;
	SHAMT[0] = #30000 1'b0;
	SHAMT[0] = #20000 1'b1;
	SHAMT[0] = #30000 1'b0;
	SHAMT[0] = #30000 1'b1;
	SHAMT[0] = #30000 1'b0;
end 
endmodule

