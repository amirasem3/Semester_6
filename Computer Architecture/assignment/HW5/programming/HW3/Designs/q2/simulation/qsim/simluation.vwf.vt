// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/30/2019 09:30:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          register_32_bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_32_bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg clk;
reg [31:0] input;
reg write_enable;
// wires                                               
wire [31:0] Out;

// assign statements (if any)                          
register_32_bit i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.clk(clk),
	.\input (input),
	.Out(Out),
	.write_enable(write_enable)
);
initial 
begin 
#1000000 $finish;
end 

// write_enable
initial
begin
	write_enable = 1'b1;
	write_enable = #10000 1'b0;
	write_enable = #10000 1'b1;
	write_enable = #10000 1'b0;
end 

// clear
initial
begin
	clear = 1'b0;
	clear = #30000 1'b1;
	clear = #10000 1'b0;
end 

// clk
initial
begin
	clk = 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
end 
// \input [ 31 ]
initial
begin
	input[31] = 1'b0;
end 
// \input [ 30 ]
initial
begin
	input[30] = 1'b0;
end 
// \input [ 29 ]
initial
begin
	input[29] = 1'b0;
end 
// \input [ 28 ]
initial
begin
	input[28] = 1'b0;
end 
// \input [ 27 ]
initial
begin
	input[27] = 1'b0;
end 
// \input [ 26 ]
initial
begin
	input[26] = 1'b0;
end 
// \input [ 25 ]
initial
begin
	input[25] = 1'b0;
end 
// \input [ 24 ]
initial
begin
	input[24] = 1'b0;
end 
// \input [ 23 ]
initial
begin
	input[23] = 1'b0;
end 
// \input [ 22 ]
initial
begin
	input[22] = 1'b0;
end 
// \input [ 21 ]
initial
begin
	input[21] = 1'b0;
end 
// \input [ 20 ]
initial
begin
	input[20] = 1'b0;
end 
// \input [ 19 ]
initial
begin
	input[19] = 1'b0;
end 
// \input [ 18 ]
initial
begin
	input[18] = 1'b0;
end 
// \input [ 17 ]
initial
begin
	input[17] = 1'b0;
end 
// \input [ 16 ]
initial
begin
	input[16] = 1'b0;
end 
// \input [ 15 ]
initial
begin
	input[15] = 1'b0;
end 
// \input [ 14 ]
initial
begin
	input[14] = 1'b0;
end 
// \input [ 13 ]
initial
begin
	input[13] = 1'b0;
	input[13] = #20000 1'b1;
	input[13] = #10000 1'b0;
end 
// \input [ 12 ]
initial
begin
	input[12] = 1'b0;
	input[12] = #20000 1'b1;
	input[12] = #10000 1'b0;
end 
// \input [ 11 ]
initial
begin
	input[11] = 1'b0;
end 
// \input [ 10 ]
initial
begin
	input[10] = 1'b0;
end 
// \input [ 9 ]
initial
begin
	input[9] = 1'b0;
end 
// \input [ 8 ]
initial
begin
	input[8] = 1'b0;
	input[8] = #20000 1'b1;
	input[8] = #10000 1'b0;
end 
// \input [ 7 ]
initial
begin
	input[7] = 1'b0;
end 
// \input [ 6 ]
initial
begin
	input[6] = 1'b0;
end 
// \input [ 5 ]
initial
begin
	input[5] = 1'b1;
	input[5] = #30000 1'b0;
end 
// \input [ 4 ]
initial
begin
	input[4] = 1'b1;
	input[4] = #30000 1'b0;
end 
// \input [ 3 ]
initial
begin
	input[3] = 1'b0;
end 
// \input [ 2 ]
initial
begin
	input[2] = 1'b0;
	input[2] = #10000 1'b1;
	input[2] = #20000 1'b0;
end 
// \input [ 1 ]
initial
begin
	input[1] = 1'b1;
	input[1] = #10000 1'b0;
end 
// \input [ 0 ]
initial
begin
	input[0] = 1'b1;
	input[0] = #30000 1'b0;
end 
endmodule

