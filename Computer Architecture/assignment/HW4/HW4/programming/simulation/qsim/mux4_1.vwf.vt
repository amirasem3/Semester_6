// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2019 20:42:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux4_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux4_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] IN_0;
reg [31:0] IN_1;
reg [31:0] IN_2;
reg [31:0] IN_3;
reg [1:0] Select;
// wires                                               
wire [31:0] OUT;

// assign statements (if any)                          
mux4_1 i1 (
// port map - connection between master ports and signals/registers   
	.IN_0(IN_0),
	.IN_1(IN_1),
	.IN_2(IN_2),
	.IN_3(IN_3),
	.OUT(OUT),
	.Select(Select)
);
initial 
begin 
#1000000 $finish;
end 
// IN_0[ 31 ]
initial
begin
	IN_0[31] = 1'b0;
end 
// IN_0[ 30 ]
initial
begin
	IN_0[30] = 1'b0;
end 
// IN_0[ 29 ]
initial
begin
	IN_0[29] = 1'b0;
end 
// IN_0[ 28 ]
initial
begin
	IN_0[28] = 1'b0;
end 
// IN_0[ 27 ]
initial
begin
	IN_0[27] = 1'b0;
end 
// IN_0[ 26 ]
initial
begin
	IN_0[26] = 1'b0;
end 
// IN_0[ 25 ]
initial
begin
	IN_0[25] = 1'b0;
end 
// IN_0[ 24 ]
initial
begin
	IN_0[24] = 1'b0;
end 
// IN_0[ 23 ]
initial
begin
	IN_0[23] = 1'b0;
end 
// IN_0[ 22 ]
initial
begin
	IN_0[22] = 1'b0;
end 
// IN_0[ 21 ]
initial
begin
	IN_0[21] = 1'b0;
end 
// IN_0[ 20 ]
initial
begin
	IN_0[20] = 1'b0;
end 
// IN_0[ 19 ]
initial
begin
	IN_0[19] = 1'b0;
end 
// IN_0[ 18 ]
initial
begin
	IN_0[18] = 1'b0;
end 
// IN_0[ 17 ]
initial
begin
	IN_0[17] = 1'b0;
end 
// IN_0[ 16 ]
initial
begin
	IN_0[16] = 1'b0;
end 
// IN_0[ 15 ]
initial
begin
	IN_0[15] = 1'b0;
end 
// IN_0[ 14 ]
initial
begin
	IN_0[14] = 1'b0;
end 
// IN_0[ 13 ]
initial
begin
	IN_0[13] = 1'b0;
end 
// IN_0[ 12 ]
initial
begin
	IN_0[12] = 1'b0;
end 
// IN_0[ 11 ]
initial
begin
	IN_0[11] = 1'b0;
end 
// IN_0[ 10 ]
initial
begin
	IN_0[10] = 1'b0;
end 
// IN_0[ 9 ]
initial
begin
	IN_0[9] = 1'b0;
end 
// IN_0[ 8 ]
initial
begin
	IN_0[8] = 1'b0;
end 
// IN_0[ 7 ]
initial
begin
	IN_0[7] = 1'b0;
end 
// IN_0[ 6 ]
initial
begin
	IN_0[6] = 1'b0;
end 
// IN_0[ 5 ]
initial
begin
	IN_0[5] = 1'b0;
end 
// IN_0[ 4 ]
initial
begin
	IN_0[4] = 1'b0;
end 
// IN_0[ 3 ]
initial
begin
	IN_0[3] = 1'b0;
end 
// IN_0[ 2 ]
initial
begin
	IN_0[2] = 1'b0;
end 
// IN_0[ 1 ]
initial
begin
	IN_0[1] = 1'b0;
end 
// IN_0[ 0 ]
initial
begin
	IN_0[0] = 1'b1;
end 
// IN_1[ 31 ]
initial
begin
	IN_1[31] = 1'b0;
end 
// IN_1[ 30 ]
initial
begin
	IN_1[30] = 1'b0;
end 
// IN_1[ 29 ]
initial
begin
	IN_1[29] = 1'b0;
end 
// IN_1[ 28 ]
initial
begin
	IN_1[28] = 1'b0;
end 
// IN_1[ 27 ]
initial
begin
	IN_1[27] = 1'b0;
end 
// IN_1[ 26 ]
initial
begin
	IN_1[26] = 1'b0;
end 
// IN_1[ 25 ]
initial
begin
	IN_1[25] = 1'b0;
end 
// IN_1[ 24 ]
initial
begin
	IN_1[24] = 1'b0;
end 
// IN_1[ 23 ]
initial
begin
	IN_1[23] = 1'b0;
end 
// IN_1[ 22 ]
initial
begin
	IN_1[22] = 1'b0;
end 
// IN_1[ 21 ]
initial
begin
	IN_1[21] = 1'b0;
end 
// IN_1[ 20 ]
initial
begin
	IN_1[20] = 1'b0;
end 
// IN_1[ 19 ]
initial
begin
	IN_1[19] = 1'b0;
end 
// IN_1[ 18 ]
initial
begin
	IN_1[18] = 1'b0;
end 
// IN_1[ 17 ]
initial
begin
	IN_1[17] = 1'b0;
end 
// IN_1[ 16 ]
initial
begin
	IN_1[16] = 1'b0;
end 
// IN_1[ 15 ]
initial
begin
	IN_1[15] = 1'b0;
end 
// IN_1[ 14 ]
initial
begin
	IN_1[14] = 1'b0;
end 
// IN_1[ 13 ]
initial
begin
	IN_1[13] = 1'b0;
end 
// IN_1[ 12 ]
initial
begin
	IN_1[12] = 1'b0;
end 
// IN_1[ 11 ]
initial
begin
	IN_1[11] = 1'b0;
end 
// IN_1[ 10 ]
initial
begin
	IN_1[10] = 1'b0;
end 
// IN_1[ 9 ]
initial
begin
	IN_1[9] = 1'b0;
end 
// IN_1[ 8 ]
initial
begin
	IN_1[8] = 1'b0;
end 
// IN_1[ 7 ]
initial
begin
	IN_1[7] = 1'b0;
end 
// IN_1[ 6 ]
initial
begin
	IN_1[6] = 1'b0;
end 
// IN_1[ 5 ]
initial
begin
	IN_1[5] = 1'b0;
end 
// IN_1[ 4 ]
initial
begin
	IN_1[4] = 1'b0;
end 
// IN_1[ 3 ]
initial
begin
	IN_1[3] = 1'b0;
end 
// IN_1[ 2 ]
initial
begin
	IN_1[2] = 1'b0;
end 
// IN_1[ 1 ]
initial
begin
	IN_1[1] = 1'b1;
end 
// IN_1[ 0 ]
initial
begin
	IN_1[0] = 1'b0;
end 
// IN_2[ 31 ]
initial
begin
	IN_2[31] = 1'b0;
end 
// IN_2[ 30 ]
initial
begin
	IN_2[30] = 1'b0;
end 
// IN_2[ 29 ]
initial
begin
	IN_2[29] = 1'b0;
end 
// IN_2[ 28 ]
initial
begin
	IN_2[28] = 1'b0;
end 
// IN_2[ 27 ]
initial
begin
	IN_2[27] = 1'b0;
end 
// IN_2[ 26 ]
initial
begin
	IN_2[26] = 1'b0;
end 
// IN_2[ 25 ]
initial
begin
	IN_2[25] = 1'b0;
end 
// IN_2[ 24 ]
initial
begin
	IN_2[24] = 1'b0;
end 
// IN_2[ 23 ]
initial
begin
	IN_2[23] = 1'b0;
end 
// IN_2[ 22 ]
initial
begin
	IN_2[22] = 1'b0;
end 
// IN_2[ 21 ]
initial
begin
	IN_2[21] = 1'b0;
end 
// IN_2[ 20 ]
initial
begin
	IN_2[20] = 1'b0;
end 
// IN_2[ 19 ]
initial
begin
	IN_2[19] = 1'b0;
end 
// IN_2[ 18 ]
initial
begin
	IN_2[18] = 1'b0;
end 
// IN_2[ 17 ]
initial
begin
	IN_2[17] = 1'b0;
end 
// IN_2[ 16 ]
initial
begin
	IN_2[16] = 1'b0;
end 
// IN_2[ 15 ]
initial
begin
	IN_2[15] = 1'b0;
end 
// IN_2[ 14 ]
initial
begin
	IN_2[14] = 1'b0;
end 
// IN_2[ 13 ]
initial
begin
	IN_2[13] = 1'b0;
end 
// IN_2[ 12 ]
initial
begin
	IN_2[12] = 1'b0;
end 
// IN_2[ 11 ]
initial
begin
	IN_2[11] = 1'b0;
end 
// IN_2[ 10 ]
initial
begin
	IN_2[10] = 1'b0;
end 
// IN_2[ 9 ]
initial
begin
	IN_2[9] = 1'b0;
end 
// IN_2[ 8 ]
initial
begin
	IN_2[8] = 1'b0;
end 
// IN_2[ 7 ]
initial
begin
	IN_2[7] = 1'b0;
end 
// IN_2[ 6 ]
initial
begin
	IN_2[6] = 1'b0;
end 
// IN_2[ 5 ]
initial
begin
	IN_2[5] = 1'b0;
end 
// IN_2[ 4 ]
initial
begin
	IN_2[4] = 1'b0;
end 
// IN_2[ 3 ]
initial
begin
	IN_2[3] = 1'b0;
end 
// IN_2[ 2 ]
initial
begin
	IN_2[2] = 1'b0;
end 
// IN_2[ 1 ]
initial
begin
	IN_2[1] = 1'b1;
end 
// IN_2[ 0 ]
initial
begin
	IN_2[0] = 1'b1;
end 
// IN_3[ 31 ]
initial
begin
	IN_3[31] = 1'b0;
end 
// IN_3[ 30 ]
initial
begin
	IN_3[30] = 1'b0;
end 
// IN_3[ 29 ]
initial
begin
	IN_3[29] = 1'b0;
end 
// IN_3[ 28 ]
initial
begin
	IN_3[28] = 1'b0;
end 
// IN_3[ 27 ]
initial
begin
	IN_3[27] = 1'b0;
end 
// IN_3[ 26 ]
initial
begin
	IN_3[26] = 1'b0;
end 
// IN_3[ 25 ]
initial
begin
	IN_3[25] = 1'b0;
end 
// IN_3[ 24 ]
initial
begin
	IN_3[24] = 1'b0;
end 
// IN_3[ 23 ]
initial
begin
	IN_3[23] = 1'b0;
end 
// IN_3[ 22 ]
initial
begin
	IN_3[22] = 1'b0;
end 
// IN_3[ 21 ]
initial
begin
	IN_3[21] = 1'b0;
end 
// IN_3[ 20 ]
initial
begin
	IN_3[20] = 1'b0;
end 
// IN_3[ 19 ]
initial
begin
	IN_3[19] = 1'b0;
end 
// IN_3[ 18 ]
initial
begin
	IN_3[18] = 1'b0;
end 
// IN_3[ 17 ]
initial
begin
	IN_3[17] = 1'b0;
end 
// IN_3[ 16 ]
initial
begin
	IN_3[16] = 1'b0;
end 
// IN_3[ 15 ]
initial
begin
	IN_3[15] = 1'b0;
end 
// IN_3[ 14 ]
initial
begin
	IN_3[14] = 1'b0;
end 
// IN_3[ 13 ]
initial
begin
	IN_3[13] = 1'b0;
end 
// IN_3[ 12 ]
initial
begin
	IN_3[12] = 1'b0;
end 
// IN_3[ 11 ]
initial
begin
	IN_3[11] = 1'b0;
end 
// IN_3[ 10 ]
initial
begin
	IN_3[10] = 1'b0;
end 
// IN_3[ 9 ]
initial
begin
	IN_3[9] = 1'b0;
end 
// IN_3[ 8 ]
initial
begin
	IN_3[8] = 1'b0;
end 
// IN_3[ 7 ]
initial
begin
	IN_3[7] = 1'b0;
end 
// IN_3[ 6 ]
initial
begin
	IN_3[6] = 1'b0;
end 
// IN_3[ 5 ]
initial
begin
	IN_3[5] = 1'b0;
end 
// IN_3[ 4 ]
initial
begin
	IN_3[4] = 1'b0;
end 
// IN_3[ 3 ]
initial
begin
	IN_3[3] = 1'b0;
end 
// IN_3[ 2 ]
initial
begin
	IN_3[2] = 1'b1;
end 
// IN_3[ 1 ]
initial
begin
	IN_3[1] = 1'b0;
end 
// IN_3[ 0 ]
initial
begin
	IN_3[0] = 1'b0;
end 
// Select[ 1 ]
initial
begin
	Select[1] = 1'b1;
end 
// Select[ 0 ]
initial
begin
	Select[0] = 1'b1;
end 
endmodule

