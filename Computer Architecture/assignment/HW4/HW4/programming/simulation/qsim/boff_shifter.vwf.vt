// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2019 16:58:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          offset_shifter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module offset_shifter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] BOFFSET;
// wires                                               
wire [31:0] BOFF_SHIFTED;

// assign statements (if any)                          
offset_shifter i1 (
// port map - connection between master ports and signals/registers   
	.BOFF_SHIFTED(BOFF_SHIFTED),
	.BOFFSET(BOFFSET)
);
initial 
begin 
#1000000 $finish;
end 
// BOFFSET[ 31 ]
initial
begin
	BOFFSET[31] = 1'b1;
end 
// BOFFSET[ 30 ]
initial
begin
	BOFFSET[30] = 1'b1;
end 
// BOFFSET[ 29 ]
initial
begin
	BOFFSET[29] = 1'b0;
end 
// BOFFSET[ 28 ]
initial
begin
	BOFFSET[28] = 1'b0;
end 
// BOFFSET[ 27 ]
initial
begin
	BOFFSET[27] = 1'b0;
end 
// BOFFSET[ 26 ]
initial
begin
	BOFFSET[26] = 1'b0;
end 
// BOFFSET[ 25 ]
initial
begin
	BOFFSET[25] = 1'b0;
end 
// BOFFSET[ 24 ]
initial
begin
	BOFFSET[24] = 1'b0;
end 
// BOFFSET[ 23 ]
initial
begin
	BOFFSET[23] = 1'b0;
end 
// BOFFSET[ 22 ]
initial
begin
	BOFFSET[22] = 1'b0;
end 
// BOFFSET[ 21 ]
initial
begin
	BOFFSET[21] = 1'b0;
end 
// BOFFSET[ 20 ]
initial
begin
	BOFFSET[20] = 1'b0;
end 
// BOFFSET[ 19 ]
initial
begin
	BOFFSET[19] = 1'b0;
end 
// BOFFSET[ 18 ]
initial
begin
	BOFFSET[18] = 1'b0;
end 
// BOFFSET[ 17 ]
initial
begin
	BOFFSET[17] = 1'b0;
end 
// BOFFSET[ 16 ]
initial
begin
	BOFFSET[16] = 1'b0;
end 
// BOFFSET[ 15 ]
initial
begin
	BOFFSET[15] = 1'b0;
end 
// BOFFSET[ 14 ]
initial
begin
	BOFFSET[14] = 1'b0;
end 
// BOFFSET[ 13 ]
initial
begin
	BOFFSET[13] = 1'b0;
end 
// BOFFSET[ 12 ]
initial
begin
	BOFFSET[12] = 1'b0;
end 
// BOFFSET[ 11 ]
initial
begin
	BOFFSET[11] = 1'b0;
end 
// BOFFSET[ 10 ]
initial
begin
	BOFFSET[10] = 1'b0;
end 
// BOFFSET[ 9 ]
initial
begin
	BOFFSET[9] = 1'b0;
end 
// BOFFSET[ 8 ]
initial
begin
	BOFFSET[8] = 1'b0;
end 
// BOFFSET[ 7 ]
initial
begin
	BOFFSET[7] = 1'b0;
end 
// BOFFSET[ 6 ]
initial
begin
	BOFFSET[6] = 1'b0;
end 
// BOFFSET[ 5 ]
initial
begin
	BOFFSET[5] = 1'b0;
end 
// BOFFSET[ 4 ]
initial
begin
	BOFFSET[4] = 1'b0;
end 
// BOFFSET[ 3 ]
initial
begin
	BOFFSET[3] = 1'b0;
end 
// BOFFSET[ 2 ]
initial
begin
	BOFFSET[2] = 1'b0;
end 
// BOFFSET[ 1 ]
initial
begin
	BOFFSET[1] = 1'b1;
end 
// BOFFSET[ 0 ]
initial
begin
	BOFFSET[0] = 1'b1;
end 
endmodule

