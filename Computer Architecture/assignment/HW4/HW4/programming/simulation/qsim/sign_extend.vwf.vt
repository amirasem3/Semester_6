// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2019 08:40:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Sign_Extend
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sign_Extend_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] offset;
// wires                                               
wire [31:0] Sign_Extend;

// assign statements (if any)                          
Sign_Extend i1 (
// port map - connection between master ports and signals/registers   
	.offset(offset),
	.Sign_Extend(Sign_Extend)
);
initial 
begin 
#1000000 $finish;
end 
// offset[ 15 ]
initial
begin
	offset[15] = 1'b0;
end 
// offset[ 14 ]
initial
begin
	offset[14] = 1'b0;
end 
// offset[ 13 ]
initial
begin
	offset[13] = 1'b1;
end 
// offset[ 12 ]
initial
begin
	offset[12] = 1'b0;
end 
// offset[ 11 ]
initial
begin
	offset[11] = 1'b1;
end 
// offset[ 10 ]
initial
begin
	offset[10] = 1'b0;
end 
// offset[ 9 ]
initial
begin
	offset[9] = 1'b1;
end 
// offset[ 8 ]
initial
begin
	offset[8] = 1'b0;
end 
// offset[ 7 ]
initial
begin
	offset[7] = 1'b1;
end 
// offset[ 6 ]
initial
begin
	offset[6] = 1'b0;
end 
// offset[ 5 ]
initial
begin
	offset[5] = 1'b1;
end 
// offset[ 4 ]
initial
begin
	offset[4] = 1'b0;
end 
// offset[ 3 ]
initial
begin
	offset[3] = 1'b1;
end 
// offset[ 2 ]
initial
begin
	offset[2] = 1'b0;
end 
// offset[ 1 ]
initial
begin
	offset[1] = 1'b1;
end 
// offset[ 0 ]
initial
begin
	offset[0] = 1'b0;
end 
endmodule

