// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/06/2019 12:44:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          tw0_complement_32bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tw0_complement_32bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
// wires                                               
wire [31:0] two_Complement;

// assign statements (if any)                          
tw0_complement_32bit i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.two_Complement(two_Complement)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 31 ]
initial
begin
	A[31] = 1'b1;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b1;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b1;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b1;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b1;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b1;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b1;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b1;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b1;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b1;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b1;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b1;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b1;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b1;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b1;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b1;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b1;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b1;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b1;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b1;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b1;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b1;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b1;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b1;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
endmodule

